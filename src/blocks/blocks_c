#include "blocks.h"

/*------------------------------------------------
 *     Scicos block simulator 
 *     A set of elementary blocks 
 *------------------------------------------------*/

typedef void (scicos0_block) (ARGS_scicos0);
extern scicos0_block F2C (absblk), F2C (bidon), F2C (gain);
extern scicos0_block F2C (cdummy), F2C (dband), F2C (cosblk);

/*------------------------------------------------
 *     Scicos block simulator 
 *     returns Absolute value of the input 
 *------------------------------------------------*/


void C2F (absblk) (flag, nevprt, t, xd, x, nx, z, nz, tvec,
		   ntvec, rpar, nrpar, ipar, nipar, u, nu, y, ny)
  int *flag, *nevprt, *nx, *nz, *nrpar, *ipar, *nipar, *ntvec, *nu, *ny;
const double *t, *xd, *x, *z, *tvec, *rpar, *u, *y;
{
  int i;
  for (i = 0; i < *nu; ++i)
    y[i] = Abs (u[i]);
}


/*------------------------------------------------
 *     Scicos block simulator 
 *     does nothing 
 *------------------------------------------------*/

void C2F (bidon) (flag, nevprt, t, xd, x, nx, z, nz, tvec,
		  ntvec, rpar, nrpar, ipar, nipar, u, nu, y, ny)
  int *flag, *nevprt, *nx, *nz, *nrpar, *ipar, *nipar, *ntvec, *nu, *ny;
const double *t, *xd, *x, *z, *tvec, *rpar, *u, *y;
{
}



/*------------------------------------------------
 *     Scicos block simulator 
 *     input to output Gain
 *     rpar=gain matrix
 *------------------------------------------------*/

void C2F (gain) (flag, nevprt, t, xd, x, nx, z, nz, tvec,
		 ntvec, rpar, nrpar, ipar, nipar, u, nu, y, ny)
  int *flag, *nevprt, *nx, *nz, *nrpar, *ipar, *nipar, *ntvec, *nu, *ny;
const double *t, *xd, *x, *z, *tvec, *rpar, *u, *y;
{
  int un = 1;
  nsp_calpack_dmmul (rpar, ny, u, nu, y, ny, ny, nu, &un);
}

/*------------------------------------------------
 *     Scicos block simulator 
 *     Dummy state space x'=sin(t)
 *------------------------------------------------*/

void C2F (cdummy) (flag, nevprt, t, xd, x, nx, z, nz, tvec,
		   ntvec, rpar, nrpar, ipar, nipar, u, nu, y, ny)
  int *flag, *nevprt, *nx, *nz, *nrpar, *ipar, *nipar, *ntvec, *nu, *ny;
const double *t, *xd, *x, *z, *tvec, *rpar, *u, *y;
{
  if (*flag == 0)
    xd[0] = sin (*t);
}

/*------------------------------------------------
 *     Scicos block simulator 
 *     Dead Band, 
 *     if u(i)<0 ,y(i)=min(0,u+DB(i)/2) 
 *     else       y(i)=max(0,u-DB(i)/2) 
 *     DB(i)=rpar(i) 
 *------------------------------------------------*/

void C2F (dband) (flag, nevprt, t, xd, x, nx, z, nz, tvec,
		  ntvec, rpar, nrpar, ipar, nipar, u, nu, y, ny)
  int *flag, *nevprt, *nx, *nz, *nrpar, *ipar, *nipar, *ntvec, *nu, *ny;
const double *t, *xd, *x, *z, *tvec, *rpar, *u, *y;
{
  int i;

  for (i = 0; i < *nu; i++)
    {
      if (u[i] < 0)
	y[i] = Min (0.00, u[i] + rpar[i] / 2.00);
      else
	y[i] = Max (0.00, u[i] - rpar[i] / 2.00);
    }
}


/*------------------------------------------------
 *     Scicos block simulator 
 *     
 *------------------------------------------------*/

void C2F (cosblk) (flag, nevprt, t, xd, x, nx, z, nz, tvec,
		   ntvec, rpar, nrpar, ipar, nipar, u, nu, y, ny)
  int *flag, *nevprt, *nx, *nz, *nrpar, *ipar, *nipar, *ntvec, *nu, *ny;
const double *t, *xd, *x, *z, *tvec, *rpar, *u, *y;
{

  int i;
  for (i = 0; i < *nu; i++)
    y[i] = cos (u[i]);
}
