
(defun foo (name replacement) 
  (goto-char (point-min))
  (replace-regexp (concat "\\([,= *()\t]\\)[ ]*" name "[ ]*\\([(,);:]\\)") (concat "\\1" replacement "\\2" ))
)

(defun test ()
  (goto-char (point-min))
  (replace-string "/* riccpack.f -- translated by f2c (version 19961017)." "/*")
  (goto-char (point-min))
  (replace-string " *   -lf2c -lm (in that order)" " *")
  (goto-char (point-min))
  (replace-string "*   You must link the resulting object file with the libraries:" " *")
  (goto-char (point-min))
  (replace-string "doublereal" "double")
  (goto-char (point-min))
  (replace-string "integer" "int")
  (goto-char (point-min))
  (replace-string "logical" "int")
  (goto-char (point-min))
  (replace-string "\"f2c\.h\"" "\"ctrlpack.h\"")
  (goto-char (point-min))
  (replace-regexp "\\([a-z0-9]*\\)_(" "nsp_ctrlpack_\\1(")
  (goto-char (point-min))
  (replace-regexp "ftnlen" "long int")
  (goto-char (point-min))
  (replace-regexp "\\([ (]\\)min[ ]*(" "\\1Min(")
  (goto-char (point-min))
  (replace-regexp "\\([ (]\\)max[ ]*(" "\\1Max(")
  (goto-char (point-min))
  (replace-regexp "\\([ (]\\)abs[ ]*(" "\\1Abs(")
  (goto-char (point-min))
  ;; this will have to be hand corrected 
  (replace-regexp "/*      CONVERTPARAMETER" "" )
  (goto-char (point-min))
  (replace-regexp "nsp_ctrlpack_nsp" "nsp_ctrlpack_")
  (goto-char (point-min))
  (replace-string "I_fp" "intg_f")
  (goto-char (point-min))
  (replace-regexp "nsp_ctrlpack_dlamch[ ]*(\"p\",[ ]*1L);"   "nsp_dlamch (\"p\");")
  (goto-char (point-min))
  (replace-regexp "nsp_ctrlpack_dlamch[ ]*(\"u\",[ ]*1L);"   "nsp_dlamch (\"u\");")
  (goto-char (point-min))
  (replace-regexp "nsp_ctrlpack_dlamch[ ]*(\"o\",[ ]*1L);"   "nsp_dlamch (\"o\");")
  (goto-char (point-min))
  (replace-string "/\* Subroutine \*/" "")
  (goto-char (point-min))
  (replace-string "TRUE_" "TRUE")
  (goto-char (point-min))
  (replace-string "FALSE_" "FALSE")
  (goto-char (point-min))
  (replace-regexp "pow_dd[ ]*(&\\([a-z0-9_]*\\),[ ]*&" "pow (\\1,")
)

(defun job () 
  (test);
  (save-buffer)
)


